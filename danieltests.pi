def print2nd[#X l:(List X) p:/[X /String]] =
	if (null l) then print!"Null list"
	else if (null (cdr l)) then print!"Null tail"
	else print!(p (car (cdr l)))

def printNth[#X l:(List X) n:Int p:/[X /String]] =
	if (null l) then print!"Index out of bounds"
	else if (>= n 1) then printNth![#X (cdr l) (- n 1) p]
	else print!(p (car l))

def getNthInt(l:(List Int) n:Int):Int =
	if (null l) then -99999
	else if (>= n 1) then (getNthInt (cdr l) (- n 1))
	else (car l)

{- (null | print!"Index out of bounds") -}

{- type getResponse = [#X X Int String] -}
def getNth [#X default:X l:(List X) n:Int res:/[X Int String]] =
	if (null l) then 
		res![default 0 "outofbounds"]
	else if (>= n 1) then 
		getNth![default (cdr l) (- n 1) res]
	else 
		res![(car l) 1 "success"]

def printFromGet[#X [v:X s:Int t:String] p:/[X /String]] =
	if (== s 0) then print!t
	else print!(p v)

def listToString[#X l:(List X) s:String p:/[X /String]] =
	if (null l) then
		print!s
	else
		listToString![(cdr l) (+$ (+$ s " ") (p (car l))) p]

def print_Int_Str[[v:Int s:String] o:/String] =
	o!s
def cmp_2d[[v1:Int s1:String] [v2:Int s2:String] o:/Cmp] =
	o!(int.cmp v1 v2)

val lst = (cons > 0 8 1 2 5 3 nil)
val lst_2d = (cons > [0 "zero"] [8 "eight"] [1 "one"] [2 "two"] [5 "five"] [3 "three"] nil)

{- run printi!(car (cdr (cdr lst))) -}
{- run print2nd![#Int lst int.toString] -}
{- run printNth![#Int lst -1 int.toString] -}
{- run printi!(getNthInt lst 3) -}
{-
run (new res:^[Int Int String]
     val default = 999999
     (getNth![default lst 0 (rchan res)]
     | res?x = printFromGet![x int.toString]))
-}
{-
run print!(+$ (+$ "yeet" " ") "yote")
run listToString![lst "" int.toString]
run listToString![(list.sort lst int.cmp (== 0 0)) "" int.toString]

val lst2 = (list.sort lst int.cmp (== 0 0))
run listToString![lst2 "" int.toString]

run print!(cmp.toString (int.cmp 0 0))
-}

{- NOTE: output is interleaved -}
{- NOTE: errors ignore indentation -}
{- NOTE: find facts on X by "run print!(X)" -}
{- sort = /[#X (List X) /[X X /Cmp] Bool /(List X)] -}

run listToString![(list.sort lst int.cmp (== 0 0)) "" int.toString]
val lst2d_sorted = (list.sort lst_2d cmp_2d (== 0 0))
run listToString![lst2d_sorted "" print_Int_Str]
