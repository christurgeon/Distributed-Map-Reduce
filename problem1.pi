def printl[l:String] = print!(+$ (+$ "[" l) "]")

def s2s[l:String o:/String] = o!l

def listToString[#X l:(List X) s:String p:/[X /String] o:/String] =
	if (null l) then
		o!s
	else if (==$ s "") then
		o!(listToString (cdr l) (p (car l)) p)
	else
		o!(listToString (cdr l) (+$ < s " " (p (car l))) p)

val p1_GLOBALSEARCHSTRING = "is"

def p1_remove[x:String current:Int size:Int builder:String res:/String] = 
	if (== current size) then
		res!builder
	else (
		val c = (string.nth x current)
		if (|| < (== c ',') (== c '.') (== c '!') (== c '?') (== c ';')  (== c ':') (== c '"') (== c '\'')) then 
			res!(p1_remove x (+ current 1) size builder)
		else 
			res!(p1_remove x (+ current 1) size (+$ builder (char.toString c)))
	)


def p1_clean_strings[i:(List String) l:(List String) o:/(List String)] =
	if (null i) then
		o!l
	else
		o!(cons > (p1_remove (car i) 0 (string.size (car i)) "") (p1_clean_strings (cdr i) l))

def p1_filter_strings [inLst:(List String) line:Int o:/(List [String Int])] =
	if (null inLst) then
		o!nil
	else if (string.in p1_GLOBALSEARCHSTRING (car inLst)) then
		o!(cons > [(car inLst) line] (p1_filter_strings (cdr inLst) line))
	else
		o!(p1_filter_strings (cdr inLst) line)

def p1_map [[i:Int s:String] o:/(List [String Int])] =
	o!(p1_filter_strings (p1_clean_strings (string.split " " s) nil) i)

def p1_compare[[ls:String li:(List Int)] [rs:String ri:(List Int)] o:/Cmp] = 
	o!(int.cmp (string.size ls) (string.size rs))

def p1_reduce [i:[String (List Int)] o:/[String (List Int)]] =
	o!i

val test_input = (cons > 
	[1 " ;his  I consider this here is"]
	[2 "  his majesty therefore history  "]
	[3 "hello    world i s how are you  "]
	nil)

val
input = (cons >
     [1 "WHEN I consider how my light is spent this his is wow what tisSorry I was a"]
     [2 "  E're half my days, in this dark world and wide,"]
     [3 "  And that one Talent which is death to hide,"]
     [4 "  Lodg'd with me useless, though my Soul more bent"]
     [5 "To serve therewith my Maker, and present"]
     [6 "  My True account, least he returning chide,"]
     [7 "  Doth God exact day-labour, light deny'd,"]
     [8 "  I fondly ask; But patience to prevent"]
     [9 "That murmur, soon replies, God doth not need"]
     [10 "  Either man's work or his own gifts, who best"]
     [11 "  Bear his milde yoak, they serve him best, his State"]
     [12 "Is Kingly. Thousands at his bidding speed"]
     [13 "  And post o're Land and Ocean without rest:"]
     [14 "  They also serve who only stand and waite."]
     nil)
{-
def xyListToString[[x:Int temp:(List String)] o:/String] =
	o!(+$ < (int.toString x) " [" (listToString temp "" s2s) "]")
-}

def second[#X #Y [l:X r:Y] o:/Y] = o!r
def first[#X #Y [l:X r:Y] o:/X] = o!l

def xyListToString[l:(List [String Int]) o:/String] =
	if (null l) then
		o!""
	else
		o!(+$ < "[" (s2s (first (car l))) " " (int.toString (second (car l))) "] " (xyListToString (cdr l)))

val map_out = (p1_map (car input))

run print!(first (car map_out))
run print!(int.toString (second (car map_out)))

run print!(xyListToString map_out)

val pompare_test = (cons > ["aaaaaaaaaaa" nil] ["aaaa" nil] ["aa" nil] ["aaa" nil] ["a" nil] nil)

def stringout[[l:String r:(List Int)] o:/String] = o!l
run print!(listToString (list.sort pompare_test p1_compare true) "" stringout)