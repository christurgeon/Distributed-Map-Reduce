import "Std/List"
import "Std/Float"

{- TYPES -}
type K1 = Int
type V1 = String 
type K2 = String
type V2 = Int
type K3 = String 
type V3 = (List Int)


type MapFunction = /[K1 V1 /(List [K2 V2])] 
type ReduceFunction = /[[K2 (List V2)] /[K3 V3]] 
type ResultsFeeder = /[(List [K1 V1])]


{-=====================================================================================-}
{-                               HELPER FUNCTIONS                                      -}
{-=====================================================================================-}


{-
    remove "unwanted" characters (punctuation)
-}        
def remove[x:String current:Int size:Int builder:String res:/String] = 
	{- if at end of string return-}
	if (== current size) then
		res!builder

	{-otherwise check current character-}
	else (
		val c = (string.nth x current)

		{-if c is bad then continue down the list-}
		if (|| < (== c ',') (== c '.') (== c '!') (== c '?') (== c ';')  (== c ':') (== c '"') (== c '\'')) then 
			res!(remove x (+ current 1) size builder)

		{-otherwise add c to the string we are building and then continue down the list-}
		else 
			res!(remove x (+ current 1) size (+$ builder (char.toString c)))
	)

{-
    Two functions used to take in a list of ints and format it nicely
-}
def intListToStringHelper[x:(List Int) curr:String s:/String] = 
	if (null x) then s!curr
	else intListToStringHelper![(cdr x) (+$ < curr " " (int.toString (car x))) s]
def intListToString[x:(List Int) s:/String] = s!(intListToStringHelper x "")

{-	
	converts a list into a single string composed of the list values
	seperated by spaces.  It requres a to string function p
-}
def listToString[l:(List V2) s:String p:/[V2 /String] o:/String] =
	if (null l) then
		o!s
	else if (==$ s "") then
		o!(listToString (cdr l) (p (car l)) p)
	else
		o!(listToString (cdr l) (+$ (+$ s " ") (p (car l))) p)

{-	
	converts a key, list of values tuple a string.  Requires a to string function
-}
def xyListToString[[x:K2 temp:(List V2)] f1:/[K2 /String] f2:/[V2 /String] o:/String] =
	o!(+$ < (f1 x) " (" (listToString temp "" f2) ")")

def printupGrouped[[x:K2 b:(List V2)] f1:/[K2 /String] f2:/[V2 /String]] = print!(xyListToString [x b] f1 f2) 

def printGroupedList [list:(List [K2 (List V2)]) f1:/[K2 /String] f2:/[V2 /String] res:/[]] = 
	if (null list) then res![]
	else (printupGrouped![(car list) f1 f2] | printGroupedList![(cdr list) f1 f2 res])


{-=====================================================================================-}
{-                               SORT AND GROUP                                        -}
{-=====================================================================================-}


{-
	Checks if a key K2 matches a key that is in a tupple.  Requres an equiv function
-}
def groupMatch[curKey:K2 [testKey:K2 l:(List V2)] e:/[K2 K2 /Bool] b:/Bool] = 
	b!(e curKey testKey)

{-
	adds a new value to a list inside a key list tupple
-}
def groupAppend[[key:K2 lst:(List V2)] value:V2 out:/[K2 (List V2)]] = 
	out![key (cons > value lst)]

{-
	Given a key, value tupple and a list of tupples made of a key and a list of values
	insert the value from new tupple into the list of tupples
-}
def groupInsert[[key:K2 value:V2] curList:(List [K2 (List V2)]) e:/[K2 K2 /Bool] outList:/(List [K2 (List V2)])] =
	{- If the list is empty (or we are at the end of the list), create a new list and insert the tupple -}
	if (null curList) then
		outList!(cons > [key (cons > value nil)] nil)

	{- If the first value matches our key, insert our value into that key's list -}
	else if (groupMatch key (car curList) e) then
		outList!(cons > (groupAppend (car curList) value) (cdr curList))

	{- otherwise iterate down the list-}
	else
		outList!(cons > (car curList) (groupInsert [key value] (cdr curList) e))

{-
	master group function.  Sends every tupple in a list of tupples to groupInsert
-}
def groupList[inList:(List [K2 V2]) curList:(List [K2 (List V2)]) e:/[K2 K2 /Bool] outList:/(List [K2 (List V2)])] =
	if (null inList) then
		outList!curList
	else
		outList!(groupList (cdr inList) (groupInsert (car inList) curList e) e)

{-
	Group the list of tupples by key, and then sort by key
-}
def reduceAndCombine[inList:(List [K2 V2]) xCompare:/[[K2 (List V2)] [K2 (List V2)] /Cmp] e:/[K2 K2 /Bool] outList:/(List [K2 (List V2)])] =
	outList!(list.sort (groupList inList nil e) xCompare true)


{-=====================================================================================-}
{-                              PROBLEM SPECIFIC CODE                                  -}
{-=====================================================================================-}


{- Global variable that tells reduce what it is looking for -}
val p1_GLOBALSEARCHSTRING = "is"

{-
	for every string in a list: split string on spaces and remove punctuation
-}
def p1_clean_strings[i:(List String) l:(List String) o:/(List String)] =
	if (null i) then
		o!l
	else
		o!(cons > (remove (car i) 0 (string.size (car i)) "") (p1_clean_strings (cdr i) l))

{-
	given a list of strings and a line number, return a list of tupples
	of the from [string, line number], that only includes strings that contain
	the search string
-}
def p1_filter_strings [inLst:(List String) line:Int o:/(List [String Int])] =
	{- if we are at the end of the list return a list bottom (nil) -}
	if (null inLst) then
		o!nil

	{- if the string contains our target, add it to the output and continue through input list -}
	else if (string.in p1_GLOBALSEARCHSTRING (car inLst)) then
		o!(cons > [(car inLst) line] (p1_filter_strings (cdr inLst) line))

	{- otherwise just continue through input list -}
	else
		o!(p1_filter_strings (cdr inLst) line)

{-
	master map function for problem 1
	given a list of [Int String] tupple made of a line number and a line
	return a list of tupples of Strings that contain the search string as keys
	and lines they appear on as tupples
-}
def p1_map [i:Int s:String o:/(List [String Int])] =
	o!(p1_filter_strings (p1_clean_strings (string.split " " s) nil) i)

{- compare strings by size for sorting -}
def p1_compare[[ls:String li:(List Int)] [rs:String ri:(List Int)] o:/Cmp] = 
	o!(int.cmp (string.size ls) (string.size rs))

{- reduce is just output channel identity bc map does all the work in this problem :) -}
def p1_reduce [i:[String (List Int)] o:/[String (List Int)]] =
	o!i

{- We are pretty confident string.ToString is bugged... so we wrote our own -}
def s2s[l:String o:/String] = o!l


{-=====================================================================================-}
{-                                  MAPREDUCE ENGINE                                   -}
{-=====================================================================================-}


{- 
Takes in a tuple of key,value, a map function to apply, and a channel to send result to

IN a: unpacked input tuple  
IN b: unpacked input tuple
IN map: map function to apply 
OUT done: channel to send results to
-}
def worker[[a:K1 b:V1] map:MapFunction done:/(List [K2 V2])] = done!(map a b)

{-
Aggregator function to read in `len` number of pairs from the `results` channel
The pairs come from worker function sending its result after applying map

IN current: number of results that we have read in from map 
IN len: the total number of results that we expect to read in from map calls
IN results: channel to read the results from
IN lst: aggregate list to collect the map results
OUT res: channel to write the aggregate of results to
-}
def resultsAggregator [current:Int len:Int results:^(List [K2 V2]) lst:(List [K2 V2]) res:/(List [K2 V2])] = 
	if (<= current (- len 1)) then 
		{-(print!"result arrived" |-} {-can add this and a closing parenthesis for debugging-}
		results?r =  
			(val rsize = (list.size r)
			if (== rsize 1) then
				resultsAggregator![(+ current 1) len results (cons (car r) lst) res] 
			else if (>= rsize 2) then
				resultsAggregator![(+ current 1) len results (list.append r lst) res]
			else  
				resultsAggregator![(+ current 1) len results lst res])
	else
		res!lst


{- 
Iterates through the input and summons workers to compute work unit.
It sends Sig when complete

IN input: input list from user
IN map: map function specified by user
IN reschannel: a channel used to send the result of map to
OUT done: signal channel to signify completion 
-}
def iterateAndSummon [input:(List [K1 V1]) map:MapFunction reschannel:/(List [K2 V2]) done:/[]] =
	if (null input) then 
		done![]
	else (worker![(car input) map reschannel]
		 | iterateAndSummon![(cdr input) map reschannel done])
 

{-
Takes in the sorted and grouped list and applies reduce on each element, aggregating 
the results and returning them through the res channel.

IN reduce: reduce function specified by the user
IN input: list that is already sorted and grouped
IN currlst: running list of reduced groups
OUT res: channel to send the list through when reduce is applied on all memebers of input
-}
def reduceHandler [reduce:ReduceFunction input:(List [K2 (List V2)]) currlst:(List [K3 V3]) res:/(List [K3 V3])] = 
	if (null input) then 
		res!currlst
	else 
		reduceHandler![reduce (cdr input) (cons (reduce (car input)) currlst) res]


{-
mapReduce engine.

IN map: map function
IN reduce: reduce function
IN compare: compare function
IN e: custom comparator to help sort keys
IN f1: print helper
IN f2: print helper
IN input: input specified by user
-}
def mapReduce [map:MapFunction reduce:ReduceFunction compare:/[[K2 (List V2)] [K2 (List V2)] /Cmp] e:/[K2 K2 /Bool] f1:/[K2 /String] f2:/[V2 /String] input:(List [K1 V1])] = 
	if (null input) then 
		print!"NULL list!"
	else (new d1:^[] 
		  new reschannel:^(List [K2 V2])
		  new finalresult:^(List [K2 V2])
		  val len = (list.size input)
		  (print!(+$ "Starting: len(input) = " (int.toString len)) 
			    | iterateAndSummon![input map (rchan reschannel) (rchan d1)] 
			    | resultsAggregator![0 len reschannel (cons > nil) (rchan finalresult)] 
			    | finalresult?r = 
				    (new d2:^[]
				    new reduced_list:^(List [K3 V3])
				    val grouped_list = (reduceAndCombine r compare e)
					    (printGroupedList![grouped_list f1 f2 (rchan d1)]
					    | d1?_ = print!"Grouping complete..."
					    | reduceHandler![reduce grouped_list (cons > nil) (rchan reduced_list)]
					    | reduced_list?r2 = print!"Reduce complete..."
						    ))))


{-=====================================================================================-}
{-=====================================================================================-}


{-
    input list for Problem 1 and Problem 2
-}
val input = (cons >
     [1 "WHEN I consider how my light is spent "]
     [2 "  E're half my days, in this dark world and wide,"]
     [3 "  And that one Talent which is death to hide,"]
     [4 "  Lodg'd with me useless, though my Soul more bent"]
     [5 "To serve therewith my Maker, and present"]
     [6 "  My True account, least he returning chide,"]
     [7 "  Doth God exact day-labour, light deny'd,"]
     [8 "  I fondly ask; But patience to prevent"]
     [9 "That murmur, soon replies, God doth not need"]
     [10 "  Either man's work or his own gifts, who best"]
     [11 "  Bear his milde yoak, they serve him best, his State"]
     [12 "Is Kingly. Thousands at his bidding speed"]
     [13 "  And post o're Land and Ocean without rest:"]
     [14 "  They also serve who only stand and waite."]
     nil)


{- RUN PROBLEM 1 -} 
run mapReduce![p1_map p1_reduce p1_compare ==$ s2s int.toString input]
